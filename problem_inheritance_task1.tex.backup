\begin{enumerate}
    \item 

Напишите программу, которая создаёт класс
\texttt{Circle} с методами для вычисления площади
и длины окружности (периметра). Программа должна запрашивать у пользователя радиус
и выводить вычисленные площадь и длину окружности.

\subsection*{Инструкции:}
\begin{enumerate}
\item Создайте класс \texttt{Circle} с методом
\texttt{\_\_init\_\_}, который принимает радиус окружности в
качестве аргумента и сохраняет его в атрибуте \texttt{self.radius}.

\item Создайте метод \texttt{calculate\_circle\_area},
без аргументов, который вычисляет площадь круга по формуле:
\[
\pi \cdot \texttt{radius}^2
\]

\item Создайте метод \texttt{calculate\_circle\_perimeter} без аргументов,
который вычисляет длину окружности по формуле:
\[
2 \cdot \pi \cdot \texttt{radius}
\]

\item Напишите цикл, который повторяется 10 раз. В каждой итерации программа должна:
\begin{enumerate}
\item запрашивать у пользователя радиус окружности,
\item создавать экземпляр класса \texttt{Circle} с этим радиусом,
\item вычислять площадь и длину окружности с помощью соответствующих методов,
\item выводить результаты на экран.
\end{enumerate}
\end{enumerate}

\subsection*{Пример использования:}
\begin{verbatim}
radius = 3
circle = Circle(radius)
area = circle.calculate_circle_area()
perimeter = circle.calculate_circle_perimeter()
print(f"Площадь окружности равна: {area}")
print(f"Периметр окружности равен: {perimeter}")
\end{verbatim}

\textbf{Вывод:}
\begin{verbatim}
Площадь окружности равна: 28.274333882308138
Периметр окружности равен: 18.84955592153876
\end{verbatim}

\item 
Напишите программу, которая создаёт класс \texttt{Square} с методами для вычисления площади
и периметра. Программа должна запрашивать у пользователя длину стороны
и выводить вычисленные площадь и периметр.

\subsection*{Инструкции:}
\begin{enumerate}
\item Создайте класс \texttt{Square} с методом
\texttt{\_\_init\_\_}, который принимает длину стороны квадрата в
качестве аргумента и сохраняет её в атрибуте \texttt{self.side}.

\item Создайте метод \texttt{calculate\_area},
без аргументов, который вычисляет площадь квадрата по формуле:
\[
\texttt{side}^2
\]

\item Создайте метод \texttt{calculate\_perimeter} без аргументов,
который вычисляет периметр квадрата по формуле:
\[
4 \cdot \texttt{side}
\]

\item Напишите цикл, который повторяется 10 раз. В каждой итерации программа должна:
\begin{enumerate}
\item запрашивать у пользователя длину стороны квадрата,
\item создавать экземпляр класса \texttt{Square} с этой длиной,
\item вычислять площадь и периметр с помощью соответствующих методов,
\item выводить результаты на экран.
\end{enumerate}
\end{enumerate}

\subsection*{Пример использования:}
\begin{verbatim}
side = 5
square = Square(side)
area = square.calculate_area()
perimeter = square.calculate_perimeter()
print(f"Площадь квадрата равна: {area}")
print(f"Периметр квадрата равен: {perimeter}")
\end{verbatim}

\textbf{Вывод:}
\begin{verbatim}
Площадь квадрата равна: 25
Периметр квадрата равен: 20
\end{verbatim}

\item
Напишите программу, которая создаёт класс \texttt{Rectangle} с методами для вычисления площади
и периметра. Программа должна запрашивать у пользователя ширину прямоугольника
(при соотношении сторон 1:2) и выводить вычисленные площадь и периметр.

\subsection*{Инструкции:}
\begin{enumerate}
\item Создайте класс \texttt{Rectangle} с методом
\texttt{\_\_init\_\_}, который принимает ширину прямоугольника в
качестве аргумента и сохраняет её в атрибуте \texttt{self.width}.
Высота прямоугольника должна быть в два раза больше ширины.

\item Создайте метод \texttt{calculate\_area},
без аргументов, который вычисляет площадь прямоугольника по формуле:
\[
\texttt{width} \cdot (2 \cdot \texttt{width})
\]

\item Создайте метод \texttt{calculate\_perimeter} без аргументов,
который вычисляет периметр прямоугольника по формуле:
\[
2 \cdot (\texttt{width} + 2 \cdot \texttt{width})
\]

\item Напишите цикл, который повторяется 10 раз. В каждой итерации программа должна:
\begin{enumerate}
\item запрашивать у пользователя ширину прямоугольника,
\item создавать экземпляр класса \texttt{Rectangle} с этой шириной,
\item вычислять площадь и периметр с помощью соответствующих методов,
\item выводить результаты на экран.
\end{enumerate}
\end{enumerate}

\subsection*{Пример использования:}
\begin{verbatim}
width = 3
rectangle = Rectangle(width)
area = rectangle.calculate_area()
perimeter = rectangle.calculate_perimeter()
print(f"Площадь прямоугольника равна: {area}")
print(f"Периметр прямоугольника равен: {perimeter}")
\end{verbatim}

\textbf{Вывод:}
\begin{verbatim}
Площадь прямоугольника равна: 18
Периметр прямоугольника равен: 18
\end{verbatim}

\item
Напишите программу, которая создаёт класс \texttt{Triangle} с методами для вычисления площади
и периметра. Программа должна запрашивать у пользователя длину стороны
равностороннего треугольника и выводить вычисленные площадь и периметр.

\subsection*{Инструкции:}
\begin{enumerate}
\item Создайте класс \texttt{Triangle} с методом
\texttt{\_\_init\_\_}, который принимает длину стороны треугольника в
качестве аргумента и сохраняет её в атрибуте \texttt{self.side}.

\item Создайте метод \texttt{calculate\_area},
без аргументов, который вычисляет площадь равностороннего треугольника по формуле:
\[
\frac{\sqrt{3}}{4} \cdot \texttt{side}^2
\]

\item Создайте метод \texttt{calculate\_perimeter} без аргументов,
который вычисляет периметр треугольника по формуле:
\[
3 \cdot \texttt{side}
\]

\item Напишите цикл, который повторяется 10 раз. В каждой итерации программа должна:
\begin{enumerate}
\item запрашивать у пользователя длину стороны треугольника,
\item создавать экземпляр класса \texttt{Triangle} с этой длиной,
\item вычислять площадь и периметр с помощью соответствующих методов,
\item выводить результаты на экран.
\end{enumerate}
\end{enumerate}

\subsection*{Пример использования:}
\begin{verbatim}
side = 4
triangle = Triangle(side)
area = triangle.calculate_area()
perimeter = triangle.calculate_perimeter()
print(f"Площадь треугольника равна: {area}")
print(f"Периметр треугольника равен: {perimeter}")
\end{verbatim}

\textbf{Вывод:}
\begin{verbatim}
Площадь треугольника равна: 6.928203230275509
Периметр треугольника равен: 12
\end{verbatim}

\item
Напишите программу, которая создаёт класс \texttt{Sphere} с методами для вычисления площади поверхности
и объёма. Программа должна запрашивать у пользователя радиус сферы
и выводить вычисленные площадь поверхности и объём.

\subsection*{Инструкции:}
\begin{enumerate}
\item Создайте класс \texttt{Sphere} с методом
\texttt{\_\_init\_\_}, который принимает радиус сферы в
качестве аргумента и сохраняет его в атрибуте \texttt{self.radius}.

\item Создайте метод \texttt{calculate\_surface\_area},
без аргументов, который вычисляет площадь поверхности сферы по формуле:
\[
4 \cdot \pi \cdot \texttt{radius}^2
\]

\item Создайте метод \texttt{calculate\_volume} без аргументов,
который вычисляет объём сферы по формуле:
\[
\frac{4}{3} \cdot \pi \cdot \texttt{radius}^3
\]

\item Напишите цикл, который повторяется 10 раз. В каждой итерации программа должна:
\begin{enumerate}
\item запрашивать у пользователя радиус сферы,
\item создавать экземпляр класса \texttt{Sphere} с этим радиусом,
\item вычислять площадь поверхности и объём с помощью соответствующих методов,
\item выводить результаты на экран.
\end{enumerate}
\end{enumerate}

\subsection*{Пример использования:}
\begin{verbatim}
radius = 2
sphere = Sphere(radius)
surface_area = sphere.calculate_surface_area()
volume = sphere.calculate_volume()
print(f"Площадь поверхности сферы равна: {surface_area}")
print(f"Объём сферы равен: {volume}")
\end{verbatim}

\textbf{Вывод:}
\begin{verbatim}
Площадь поверхности сферы равна: 50.26548245743669
Объём сферы равен: 33.510321638291124
\end{verbatim}

\item
Напишите программу, которая создаёт класс \texttt{Cylinder} с методами для вычисления объёма
и площади боковой поверхности. Программа должна запрашивать у пользователя радиус основания
и выводить вычисленные объём и площадь боковой поверхности (высота цилиндра фиксирована и равна 5).

\subsection*{Инструкции:}
\begin{enumerate}
\item Создайте класс \texttt{Cylinder} с методом
\texttt{\_\_init\_\_}, который принимает радиус основания цилиндра в
качестве аргумента и сохраняет его в атрибуте \texttt{self.radius}.
Высота цилиндра фиксирована и равна 5.

\item Создайте метод \texttt{calculate\_volume},
без аргументов, который вычисляет объём цилиндра по формуле:
\[
\pi \cdot \texttt{radius}^2 \cdot 5
\]

\item Создайте метод \texttt{calculate\_lateral\_area} без аргументов,
который вычисляет площадь боковой поверхности цилиндра по формуле:
\[
2 \cdot \pi \cdot \texttt{radius} \cdot 5
\]

\item Напишите цикл, который повторяется 10 раз. В каждой итерации программа должна:
\begin{enumerate}
\item запрашивать у пользователя радиус основания цилиндра,
\item создавать экземпляр класса \texttt{Cylinder} с этим радиусом,
\item вычислять объём и площадь боковой поверхности с помощью соответствующих методов,
\item выводить результаты на экран.
\end{enumerate}
\end{enumerate}

\subsection*{Пример использования:}
\begin{verbatim}
radius = 3
cylinder = Cylinder(radius)
volume = cylinder.calculate_volume()
lateral_area = cylinder.calculate_lateral_area()
print(f"Объём цилиндра равен: {volume}")
print(f"Площадь боковой поверхности равна: {lateral_area}")
\end{verbatim}

\textbf{Вывод:}
\begin{verbatim}
Объём цилиндра равен: 141.3716694115407
Площадь боковой поверхности равна: 94.24777960769379
\end{verbatim}

\item
Напишите программу, которая создаёт класс \texttt{Cone} с методами для вычисления объёма
и площади боковой поверхности. Программа должна запрашивать у пользователя радиус основания
и выводить вычисленные объём и площадь боковой поверхности (высота конуса фиксирована и равна 10).

\subsection*{Инструкции:}
\begin{enumerate}
\item Создайте класс \texttt{Cone} с методом
\texttt{\_\_init\_\_}, который принимает радиус основания конуса в
качестве аргумента и сохраняет его в атрибуте \texttt{self.radius}.
Высота конуса фиксирована и равна 10.

\item Создайте метод \texttt{calculate\_volume},
без аргументов, который вычисляет объём конуса по формуле:
\[
\frac{1}{3} \cdot \pi \cdot \texttt{radius}^2 \cdot 10
\]

\item Создайте метод \texttt{calculate\_lateral\_area} без аргументов,
который вычисляет площадь боковой поверхности конуса по формуле:
\[
\pi \cdot \texttt{radius} \cdot \sqrt{\texttt{radius}^2 + 10^2}
\]

\item Напишите цикл, который повторяется 10 раз. В каждой итерации программа должна:
\begin{enumerate}
\item запрашивать у пользователя радиус основания конуса,
\item создавать экземпляр класса \texttt{Cone} с этим радиусом,
\item вычислять объём и площадь боковой поверхности с помощью соответствующих методов,
\item выводить результаты на экран.
\end{enumerate}
\end{enumerate}

\subsection*{Пример использования:}
\begin{verbatim}
radius = 3
cone = Cone(radius)
volume = cone.calculate_volume()
lateral_area = cone.calculate_lateral_area()
print(f"Объём конуса равен: {volume}")
print(f"Площадь боковой поверхности равна: {lateral_area}")
\end{verbatim}

\textbf{Вывод:}
\begin{verbatim}
Объём конуса равен: 94.24777960769379
Площадь боковой поверхности равна: 94.86832980505137
\end{verbatim}

\item
Напишите программу, которая создаёт класс \texttt{Cube} с методами для вычисления объёма
и площади полной поверхности. Программа должна запрашивать у пользователя длину ребра куба
и выводить вычисленные объём и площадь.

\subsection*{Инструкции:}
\begin{enumerate}
\item Создайте класс \texttt{Cube} с методом
\texttt{\_\_init\_\_}, который принимает длину ребра куба в
качестве аргумента и сохраняет её в атрибуте \texttt{self.side}.

\item Создайте метод \texttt{calculate\_volume},
без аргументов, который вычисляет объём куба по формуле:
\[
\texttt{side}^3
\]

\item Создайте метод \texttt{calculate\_surface\_area} без аргументов,
который вычисляет площадь полной поверхности куба по формуле:
\[
6 \cdot \texttt{side}^2
\]

\item Напишите цикл, который повторяется 10 раз. В каждой итерации программа должна:
\begin{enumerate}
\item запрашивать у пользователя длину ребра куба,
\item создавать экземпляр класса \texttt{Cube} с этой длиной,
\item вычислять объём и площадь полной поверхности с помощью соответствующих методов,
\item выводить результаты на экран.
\end{enumerate}
\end{enumerate}

\subsection*{Пример использования:}
\begin{verbatim}
side = 4
cube = Cube(side)
volume = cube.calculate_volume()
surface_area = cube.calculate_surface_area()
print(f"Объём куба равен: {volume}")
print(f"Площадь полной поверхности равна: {surface_area}")
\end{verbatim}

\textbf{Вывод:}
\begin{verbatim}
Объём куба равен: 64
Площадь полной поверхности равна: 96
\end{verbatim}

\item
Напишите программу, которая создаёт класс \texttt{Parallelogram} с методами для вычисления площади
и периметра. Программа должна запрашивать у пользователя длину основания параллелограмма
и выводить вычисленные площадь и периметр (высота параллелограмма фиксирована и равна 8, 
а боковая сторона равна 6).

\subsection*{Инструкции:}
\begin{enumerate}
\item Создайте класс \texttt{Parallelogram} с методом
\texttt{\_\_init\_\_}, который принимает длину основания параллелограмма в
качестве аргумента и сохраняет её в атрибуте \texttt{self.base}.
Высота параллелограмма фиксирована и равна 8, а боковая сторона равна 6.

\item Создайте метод \texttt{calculate\_area},
без аргументов, который вычисляет площадь параллелограмма по формуле:
\[
\texttt{base} \cdot 8
\]

\item Создайте метод \texttt{calculate\_perimeter} без аргументов,
который вычисляет периметр параллелограмма по формуле:
\[
2 \cdot (\texttt{base} + 6)
\]

\item Напишите цикл, который повторяется 10 раз. В каждой итерации программа должна:
\begin{enumerate}
\item запрашивать у пользователя длину основания параллелограмма,
\item создавать экземпляр класса \texttt{Parallelogram} с этой длиной,
\item вычислять площадь и периметр с помощью соответствующих методов,
\item выводить результаты на экран.
\end{enumerate}
\end{enumerate}

\subsection*{Пример использования:}
\begin{verbatim}
base = 5
parallelogram = Parallelogram(base)
area = parallelogram.calculate_area()
perimeter = parallelogram.calculate_perimeter()
print(f"Площадь параллелограмма равна: {area}")
print(f"Периметр параллелограмма равен: {perimeter}")
\end{verbatim}

\textbf{Вывод:}
\begin{verbatim}
Площадь параллелограмма равна: 40
Периметр параллелограмма равен: 22
\end{verbatim}


\item
Напишите программу, которая создаёт класс \texttt{Ellipse} с методами для вычисления площади
и приближённого значения периметра. Программа должна запрашивать у пользователя длину большой полуоси
и выводить вычисленные площадь и периметр (длина малой полуоси фиксирована и равна 3).

\subsection*{Инструкции:}
\begin{enumerate}
\item Создайте класс \texttt{Ellipse} с методом
\texttt{\_\_init\_\_}, который принимает длину большой полуоси эллипса в
качестве аргумента и сохраняет её в атрибуте \texttt{self.major\_axis}.
Длина малой полуоси фиксирована и равна 3.

\item Создайте метод \texttt{calculate\_area},
без аргументов, который вычисляет площадь эллипса по формуле:
\[
\pi \cdot \texttt{major\_axis} \cdot 3
\]

\item Создайте метод \texttt{calculate\_perimeter} без аргументов,
который вычисляет приближённое значение периметра эллипса по формуле Рамануджана:
\[
\pi \cdot \left(3(\texttt{major\_axis} + 3) - \sqrt{(3\texttt{major\_axis} + 3)(\texttt{major\_axis} + 9)\right)
\]

\item Напишите цикл, который повторяется 10 раз. В каждой итерации программа должна:
\begin{enumerate}
\item запрашивать у пользователя длину большой полуоси эллипса,
\item создавать экземпляр класса \texttt{Ellipse} с этой длиной,
\item вычислять площадь и периметр с помощью соответствующих методов,
\item выводить результаты на экран.
\end{enumerate}
\end{enumerate}

\subsection*{Пример использования:}
\begin{verbatim}
major_axis = 5
ellipse = Ellipse(major_axis)
area = ellipse.calculate_area()
perimeter = ellipse.calculate_perimeter()
print(f"Площадь эллипса равна: {area}")
print(f"Периметр эллипса равен: {perimeter}")
\end{verbatim}

\textbf{Вывод:}
\begin{verbatim}
Площадь эллипса равна: 47.12388980384689
Периметр эллипса равен: 25.74488980384689
\end{verbatim}

\item
Напишите программу, которая создаёт класс \texttt{BankAccount} с методами для вычисления начисленных процентов
и суммы налога на доход. Программа должна запрашивать у пользователя начальный баланс счёта
и выводить вычисленные проценты и налог (процентная ставка фиксирована и равна 5\%, 
налоговая ставка на доход фиксирована и равна 13\%).

\subsection*{Инструкции:}
\begin{enumerate}
\item Создайте класс \texttt{BankAccount} с методом
\texttt{\_\_init\_\_}, который принимает начальный баланс счёта в
качестве аргумента и сохраняет его в атрибуте \texttt{self.balance}.

\item Создайте метод \texttt{calculate\_interest},
без аргументов, который вычисляет начисленные проценты по формуле:
\[
\texttt{balance} \cdot 0.05
\]

\item Создайте метод \texttt{calculate\_tax} без аргументов,
который вычисляет сумму налога на полученный доход (проценты) по формуле:
\[
(\texttt{balance} \cdot 0.05) \cdot 0.13
\]

\item Напишите цикл, который повторяется 10 раз. В каждой итерации программа должна:
\begin{enumerate}
\item запрашивать у пользователя начальный баланс счёта,
\item создавать экземпляр класса \texttt{BankAccount} с этим балансом,
\item вычислять начисленные проценты и сумму налога с помощью соответствующих методов,
\item выводить результаты на экран.
\end{enumerate}
\end{enumerate}

\subsection*{Пример использования:}
\begin{verbatim}
balance = 1000
account = BankAccount(balance)
interest = account.calculate_interest()
tax = account.calculate_tax()
print(f"Начисленные проценты: {interest}")
print(f"Сумма налога на доход: {tax}")
\end{verbatim}

\textbf{Вывод:}
\begin{verbatim}
Начисленные проценты: 50.0
Сумма налога на доход: 6.5
\end{verbatim}

\item
Напишите программу, которая создаёт класс \texttt{TemperatureConverter} с методами для преобразования температуры
из градусов Цельсия в Фаренгейты и Кельвины. Программа должна запрашивать у пользователя температуру в Цельсиях
и выводить преобразованные значения.

\subsection*{Инструкции:}
\begin{enumerate}
\item Создайте класс \texttt{TemperatureConverter} с методом
\texttt{\_\_init\_\_}, который принимает температуру в градусах Цельсия в
качестве аргумента и сохраняет её в атрибуте \texttt{self.celsius}.

\item Создайте метод \texttt{to\_fahrenheit},
без аргументов, который преобразует температуру в Фаренгейты по формуле:
\[
(\texttt{celsius} \times \frac{9}{5}) + 32
\]

\item Создайте метод \texttt{to\_kelvin} без аргументов,
который преобразует температуру в Кельвины по формуле:
\[
\texttt{celsius} + 273.15
\]

\item Напишите цикл, который повторяется 10 раз. В каждой итерации программа должна:
\begin{enumerate}
\item запрашивать у пользователя температуру в градусах Цельсия,
\item создавать экземпляр класса \texttt{TemperatureConverter} с этим значением,
\item вычислять температуру в Фаренгейтах и Кельвинах с помощью соответствующих методов,
\item выводить результаты на экран.
\end{enumerate}
\end{enumerate}

\subsection*{Пример использования:}
\begin{verbatim}
celsius = 25
converter = TemperatureConverter(celsius)
fahrenheit = converter.to_fahrenheit()
kelvin = converter.to_kelvin()
print(f"Температура в Фаренгейтах: {fahrenheit}")
print(f"Температура в Кельвинах: {kelvin}")
\end{verbatim}

\textbf{Вывод:}
\begin{verbatim}
Температура в Фаренгейтах: 77.0
Температура в Кельвинах: 298.15
\end{verbatim}

\item
Напишите программу, которая создаёт класс \texttt{DistanceConverter} с методами для преобразования расстояния
из метров в километры и мили. Программа должна запрашивать у пользователя расстояние в метрах
и выводить преобразованные значения.

\subsection*{Инструкции:}
\begin{enumerate}
\item Создайте класс \texttt{DistanceConverter} с методом
\texttt{\_\_init\_\_}, который принимает расстояние в метрах в
качестве аргумента и сохраняет его в атрибуте \texttt{self.meters}.

\item Создайте метод \texttt{to\_kilometers},
без аргументов, который преобразует расстояние в километры по формуле:
\[
\texttt{meters} \div 1000
\]

\item Создайте метод \texttt{to\_miles} без аргументов,
который преобразует расстояние в мили по формуле:
\[
\texttt{meters} \div 1609.344
\]

\item Напишите цикл, который повторяется 10 раз. В каждой итерации программа должна:
\begin{enumerate}
\item запрашивать у пользователя расстояние в метрах,
\item создавать экземпляр класса \texttt{DistanceConverter} с этим значением,
\item вычислять расстояние в километрах и милях с помощью соответствующих методов,
\item выводить результаты на экран.
\end{enumerate}
\end{enumerate}

\subsection*{Пример использования:}
\begin{verbatim}
meters = 1609.344
converter = DistanceConverter(meters)
kilometers = converter.to_kilometers()
miles = converter.to_miles()
print(f"Расстояние в километрах: {kilometers}")
print(f"Расстояние в милях: {miles}")
\end{verbatim}

\textbf{Вывод:}
\begin{verbatim}
Расстояние в километрах: 1.609344
Расстояние в милях: 1.0
\end{verbatim}

\item
Напишите программу, которая создаёт класс \texttt{WeightConverter} с методами для преобразования массы
из килограммов в граммы и фунты. Программа должна запрашивать у пользователя массу в килограммах
и выводить преобразованные значения.

\subsection*{Инструкции:}
\begin{enumerate}
\item Создайте класс \texttt{WeightConverter} с методом
\texttt{\_\_init\_\_}, который принимает массу в килограммах в
качестве аргумента и сохраняет её в атрибуте \texttt{self.kg}.

\item Создайте метод \texttt{to\_grams},
без аргументов, который преобразует массу в граммы по формуле:
\[
\texttt{kg} \times 1000
\]

\item Создайте метод \texttt{to\_pounds} без аргументов,
который преобразует массу в фунты по формуле:
\[
\texttt{kg} \times 2.20462
\]

\item Напишите цикл, который повторяется 10 раз. В каждой итерации программа должна:
\begin{enumerate}
\item запрашивать у пользователя массу в килограммах,
\item создавать экземпляр класса \texttt{WeightConverter} с этим значением,
\item вычислять массу в граммах и фунтах с помощью соответствующих методов,
\item выводить результаты на экран.
\end{enumerate}
\end{enumerate}

\subsection*{Пример использования:}
\begin{verbatim}
kg = 2.5
converter = WeightConverter(kg)
grams = converter.to_grams()
pounds = converter.to_pounds()
print(f"Масса в граммах: {grams}")
print(f"Масса в фунтах: {pounds}")
\end{verbatim}

\textbf{Вывод:}
\begin{verbatim}
Масса в граммах: 2500.0
Масса в фунтах: 5.51155
\end{verbatim}

\item 


Напишите программу, которая создаёт класс \texttt{TimeConverter} с методами для преобразования времени
из секунд в минуты и часы. Программа должна запрашивать у пользователя время в секундах
и выводить преобразованные значения.

\subsection*{Инструкции:}
\begin{enumerate}
\item Создайте класс \texttt{TimeConverter} с методом
\texttt{\_\_init\_\_}, который принимает время в секундах в
качестве аргумента и сохраняет его в атрибуте \texttt{self.seconds}.

\item Создайте метод \texttt{to\_minutes},
без аргументов, который преобразует время в минуты по формуле:
\[
\texttt{seconds} \div 60
\]

\item Создайте метод \texttt{to\_hours} без аргументов,
который преобразует время в часы по формуле:
\[
\texttt{seconds} \div 3600
\]

\item Напишите цикл, который повторяется 10 раз. В каждой итерации программа должна:
\begin{enumerate}
\item запрашивать у пользователя время в секундах,
\item создавать экземпляр класса \texttt{TimeConverter} с этим значением,
\item вычислять время в минутах и часах с помощью соответствующих методов,
\item выводить результаты на экран.
\end{enumerate}
\end{enumerate}

\subsection*{Пример использования:}
\begin{verbatim}
seconds = 7200
converter = TimeConverter(seconds)
minutes = converter.to_minutes()
hours = converter.to_hours()
print(f"Время в минутах: {minutes}")
print(f"Время в часах: {hours}")
\end{verbatim}

\textbf{Вывод:}
\begin{verbatim}
Время в минутах: 120.0
Время в часах: 2.0
\end{verbatim}

\item


Напишите программу, которая создаёт класс \texttt{SpeedConverter} с методами для преобразования скорости
из километров в час в метры в секунду и мили в час. Программа должна запрашивать у пользователя скорость в км/ч
и выводить преобразованные значения.

\subsection*{Инструкции:}
\begin{enumerate}
\item Создайте класс \texttt{SpeedConverter} с методом
\texttt{\_\_init\_\_}, который принимает скорость в км/ч в
качестве аргумента и сохраняет её в атрибуте \texttt{self.kmh}.

\item Создайте метод \texttt{to\_ms},
без аргументов, который преобразует скорость в м/с по формуле:
\[
\texttt{kmh} \times \frac{1000}{3600}
\]

\item Создайте метод \texttt{to\_mph} без аргументов,
который преобразует скорость в мили/ч по формуле:
\[
\texttt{kmh} \div 1.60934
\]

\item Напишите цикл, который повторяется 10 раз. В каждой итерации программа должна:
\begin{enumerate}
\item запрашивать у пользователя скорость в км/ч,
\item создавать экземпляр класса \texttt{SpeedConverter} с этим значением,
\item вычислять скорость в м/с и милях/ч с помощью соответствующих методов,
\item выводить результаты на экран.
\end{enumerate}
\end{enumerate}

\subsection*{Пример использования:}
\begin{verbatim}
kmh = 100
converter = SpeedConverter(kmh)
ms = converter.to_ms()
mph = converter.to_mph()
print(f"Скорость в м/с: {ms}")
print(f"Скорость в милях/ч: {mph}")
\end{verbatim}

\textbf{Вывод:}
\begin{verbatim}
Скорость в м/с: 27.77777777777778
Скорость в милях/ч: 62.13727366498068
\end{verbatim}

\item 

Напишите программу, которая создаёт класс \texttt{AreaConverter} с методами для преобразования площади
из квадратных метров в гектары и акры. Программа должна запрашивать у пользователя площадь в м²
и выводить преобразованные значения.

\subsection*{Инструкции:}
\begin{enumerate}
\item Создайте класс \texttt{AreaConverter} с методом
\texttt{\_\_init\_\_}, который принимает площадь в м² в
качестве аргумента и сохраняет её в атрибуте \texttt{self.sq\_meters}.

\item Создайте метод \texttt{to\_hectares},
без аргументов, который преобразует площадь в гектары по формуле:
\[
\texttt{sq\_meters} \div 10000
\]

\item Создайте метод \texttt{to\_acres} без аргументов,
который преобразует площадь в акры по формуле:
\[
\texttt{sq\_meters} \div 4046.86
\]

\item Напишите цикл, который повторяется 10 раз. В каждой итерации программа должна:
\begin{enumerate}
\item запрашивать у пользователя площадь в м²,
\item создавать экземпляр класса \texttt{AreaConverter} с этим значением,
\item вычислять площадь в гектарах и акрах с помощью соответствующих методов,
\item выводить результаты на экран.
\end{enumerate}
\end{enumerate}

\subsection*{Пример использования:}
\begin{verbatim}
sq_meters = 10000
converter = AreaConverter(sq_meters)
hectares = converter.to_hectares()
acres = converter.to_acres()
print(f"Площадь в гектарах: {hectares}")
print(f"Площадь в акрах: {acres}")
\end{verbatim}

\textbf{Вывод:}
\begin{verbatim}
Площадь в гектарах: 1.0
Площадь в акрах: 2.4710514233241505
\end{verbatim}

\item 

Напишите программу, которая создаёт класс \texttt{VolumeConverter} с методами для преобразования объёма
из литров в галлоны и кубические метры. Программа должна запрашивать у пользователя объём в литрах
и выводить преобразованные значения.

\subsection*{Инструкции:}
\begin{enumerate}
\item Создайте класс \texttt{VolumeConverter} с методом
\texttt{\_\_init\_\_}, который принимает объём в литрах в
качестве аргумента и сохраняет его в атрибуте \texttt{self.liters}.

\item Создайте метод \texttt{to\_gallons},
без аргументов, который преобразует объём в галлоны по формуле:
\[
\texttt{liters} \div 3.78541
\]

\item Создайте метод \texttt{to\_cubic\_meters} без аргументов,
который преобразует объём в кубические метры по формуле:
\[
\texttt{liters} \div 1000
\]

\item Напишите цикл, который повторяется 10 раз. В каждой итерации программа должна:
\begin{enumerate}
\item запрашивать у пользователя объём в литрах,
\item создавать экземпляр класса \texttt{VolumeConverter} с этим значением,
\item вычислять объём в галлонах и кубических метрах с помощью соответствующих методов,
\item выводить результаты на экран.
\end{enumerate}
\end{enumerate}

\subsection*{Пример использования:}
\begin{verbatim}
liters = 10
converter = VolumeConverter(liters)
gallons = converter.to_gallons()
cubic_meters = converter.to_cubic_meters()
print(f"Объём в галлонах: {gallons}")
print(f"Объём в кубических метрах: {cubic_meters}")
\end{verbatim}

\textbf{Вывод:}
\begin{verbatim}
Объём в галлонах: 2.641720523581484
Объём в кубических метрах: 0.01
\end{verbatim}

\item

Напишите программу, которая создаёт класс \texttt{EnergyConverter} с методами для преобразования энергии
из джоулей в калории и киловатт-часы. Программа должна запрашивать у пользователя энергию в джоулях
и выводить преобразованные значения.

\subsection*{Инструкции:}
\begin{enumerate}
\item Создайте класс \texttt{EnergyConverter} с методом
\texttt{\_\_init\_\_}, который принимает энергию в джоулях в
качестве аргумента и сохраняет её в атрибуте \texttt{self.joules}.

\item Создайте метод \texttt{to\_calories},
без аргументов, который преобразует энергию в калории по формуле:
\[
\texttt{joules} \div 4.184
\]

\item Создайте метод \texttt{to\_kwh} без аргументов,
который преобразует энергию в киловатт-часы по формуле:
\[
\texttt{joules} \div 3.6 \times 10^6
\]

\item Напишите цикл, который повторяется 10 раз. В каждой итерации программа должна:
\begin{enumerate}
\item запрашивать у пользователя энергию в джоулях,
\item создавать экземпляр класса \texttt{EnergyConverter} с этим значением,
\item вычислять энергию в калориях и киловатт-часах с помощью соответствующих методов,
\item выводить результаты на экран.
\end{enumerate}
\end{enumerate}

\subsection*{Пример использования:}
\begin{verbatim}
joules = 10000
converter = EnergyConverter(joules)
calories = converter.to_calories()
kwh = converter.to_kwh()
print(f"Энергия в калориях: {calories}")
print(f"Энергия в киловатт-часах: {kwh}")
\end{verbatim}

\textbf{Вывод:}
\begin{verbatim}
Энергия в калориях: 2390.057361376673
Энергия в киловатт-часах: 0.002777777777777778
\end{verbatim}

\item 

Напишите программу, которая создаёт класс \texttt{PowerConverter} с методами для преобразования мощности
из ватт в лошадиные силы и киловатты. Программа должна запрашивать у пользователя мощность в ваттах
и выводить преобразованные значения.

\subsection*{Инструкции:}
\begin{enumerate}
\item Создайте класс \texttt{PowerConverter} с методом
\texttt{\_\_init\_\_}, который принимает мощность в ваттах в
качестве аргумента и сохраняет её в атрибуте \texttt{self.watts}.

\item Создайте метод \texttt{to\_horsepower},
без аргументов, который преобразует мощность в лошадиные силы по формуле:
\[
\texttt{watts} \div 745.7
\]

\item Создайте метод \texttt{to\_kilowatts} без аргументов,
который преобразует мощность в киловатты по формуле:
\[
\texttt{watts} \div 1000
\]

\item Напишите цикл, который повторяется 10 раз. В каждой итерации программа должна:
\begin{enumerate}
\item запрашивать у пользователя мощность в ваттах,
\item создавать экземпляр класса \texttt{PowerConverter} с этим значением,
\item вычислять мощность в л.с. и киловаттах с помощью соответствующих методов,
\item выводить результаты на экран.
\end{enumerate}
\end{enumerate}

\subsection*{Пример использования:}
\begin{verbatim}
watts = 1000
converter = PowerConverter(watts)
horsepower = converter.to_horsepower()
kilowatts = converter.to_kilowatts()
print(f"Мощность в л.с.: {horsepower}")
print(f"Мощность в киловаттах: {kilowatts}")
\end{verbatim}

\textbf{Вывод:}
\begin{verbatim}
Мощность в л.с.: 1.3410220903956017
Мощность в киловаттах: 1.0
\end{verbatim}


\item

Напишите программу, которая создаёт класс \texttt{PressureConverter} с методами для преобразования давления
из паскалей в атмосферы и бары. Программа должна запрашивать у пользователя давление в паскалях
и выводить преобразованные значения.

\subsection*{Инструкции:}
\begin{enumerate}
\item Создайте класс \texttt{PressureConverter} с методом
\texttt{\_\_init\_\_}, который принимает давление в паскалях в
качестве аргумента и сохраняет его в атрибуте \texttt{self.pascals}.

\item Создайте метод \texttt{to\_atm},
без аргументов, который преобразует давление в атмосферы по формуле:
\[
\texttt{pascals} \div 101325
\]

\item Создайте метод \texttt{to\_bar} без аргументов,
который преобразует давление в бары по формуле:
\[
\texttt{pascals} \div 100000
\]

\item Напишите цикл, который повторяется 10 раз. В каждой итерации программа должна:
\begin{enumerate}
\item запрашивать у пользователя давление в паскалях,
\item создавать экземпляр класса \texttt{PressureConverter} с этим значением,
\item вычислять давление в атмосферах и барах с помощью соответствующих методов,
\item выводить результаты на экран.
\end{enumerate}
\end{enumerate}

\subsection*{Пример использования:}
\begin{verbatim}
pascals = 101325
converter = PressureConverter(pascals)
atm = converter.to_atm()
bar = converter.to_bar()
print(f"Давление в атмосферах: {atm}")
print(f"Давление в барах: {bar}")
\end{verbatim}

\textbf{Вывод:}
\begin{verbatim}
Давление в атмосферах: 1.0
Давление в барах: 1.01325
\end{verbatim}

\item 

Напишите программу, которая создаёт класс \texttt{ForceConverter} с методами для преобразования силы
из ньютонов в дины и фунты-силы. Программа должна запрашивать у пользователя силу в ньютонах
и выводить преобразованные значения.

\subsection*{Инструкции:}
\begin{enumerate}
\item Создайте класс \texttt{ForceConverter} с методом
\texttt{\_\_init\_\_}, который принимает силу в ньютонах в
качестве аргумента и сохраняет её в атрибуте \texttt{self.newtons}.

\item Создайте метод \texttt{to\_dyne},
без аргументов, который преобразует силу в дины по формуле:
\[
\texttt{newtons} \times 100000
\]

\item Создайте метод \texttt{to\_pound\_force} без аргументов,
который преобразует силу в фунты-силы по формуле:
\[
\texttt{newtons} \div 4.44822
\]

\item Напишите цикл, который повторяется 10 раз. В каждой итерации программа должна:
\begin{enumerate}
\item запрашивать у пользователя силу в ньютонах,
\item создавать экземпляр класса \texttt{ForceConverter} с этим значением,
\item вычислять силу в динах и фунтах-силы с помощью соответствующих методов,
\item выводить результаты на экран.
\end{enumerate}
\end{enumerate}

\subsection*{Пример использования:}
\begin{verbatim}
newtons = 10
converter = ForceConverter(newtons)
dyne = converter.to_dyne()
pound_force = converter.to_pound_force()
print(f"Сила в динах: {dyne}")
print(f"Сила в фунтах-силы: {pound_force}")
\end{verbatim}

\textbf{Вывод:}
\begin{verbatim}
Сила в динах: 1000000.0
Сила в фунтах-силы: 2.248089430997145
\end{verbatim}

\item 

\subsection*{Задание: Конвертер силы}
Напишите программу, которая создаёт класс \texttt{ForceConverter} с методами для преобразования силы
из ньютонов в дины и фунты-силы. Программа должна запрашивать у пользователя силу в ньютонах
и выводить преобразованные значения.

\subsection*{Инструкции:}
\begin{enumerate}
\item Создайте класс \texttt{ForceConverter} с методом
\texttt{\_\_init\_\_}, который принимает силу в ньютонах в
качестве аргумента и сохраняет её в атрибуте \texttt{self.newtons}.

\item Создайте метод \texttt{to\_dyne},
без аргументов, который преобразует силу в дины по формуле:
\[
\texttt{newtons} \times 100000
\]

\item Создайте метод \texttt{to\_pound\_force} без аргументов,
который преобразует силу в фунты-силы по формуле:
\[
\texttt{newtons} \div 4.44822
\]

\item Напишите цикл, который повторяется 10 раз. В каждой итерации программа должна:
\begin{enumerate}
\item запрашивать у пользователя силу в ньютонах,
\item создавать экземпляр класса \texttt{ForceConverter} с этим значением,
\item вычислять силу в динах и фунтах-силы с помощью соответствующих методов,
\item выводить результаты на экран.
\end{enumerate}
\end{enumerate}

\subsection*{Пример использования:}
\begin{verbatim}
newtons = 10
converter = ForceConverter(newtons)
dyne = converter.to_dyne()
pound_force = converter.to_pound_force()
print(f"Сила в динах: {dyne}")
print(f"Сила в фунтах-силы: {pound_force}")
\end{verbatim}

\textbf{Вывод:}
\begin{verbatim}
Сила в динах: 1000000.0
Сила в фунтах-силы: 2.248089430997145
\end{verbatim}

\item

Напишите программу, которая создаёт класс \texttt{ResistanceConverter} с методами для преобразования электрического сопротивления
из омов в килоомы и мегаомы. Программа должна запрашивать у пользователя сопротивление в омах
и выводить преобразованные значения.

\subsection*{Инструкции:}
\begin{enumerate}
\item Создайте класс \texttt{ResistanceConverter} с методом
\texttt{\_\_init\_\_}, который принимает сопротивление в омах в
качестве аргумента и сохраняет его в атрибуте \texttt{self.ohms}.

\item Создайте метод \texttt{to\_kiloohms},
без аргументов, который преобразует сопротивление в килоомы по формуле:
\[
\texttt{ohms} \div 1000
\]

\item Создайте метод \texttt{to\_megaohms} без аргументов,
который преобразует сопротивление в мегаомы по формуле:
\[
\texttt{ohms} \div 1000000
\]

\item Напишите цикл, который повторяется 10 раз. В каждой итерации программа должна:
\begin{enumerate}
\item запрашивать у пользователя сопротивление в омах,
\item создавать экземпляр класса \texttt{ResistanceConverter} с этим значением,
\item вычислять сопротивление в килоомах и мегаомах с помощью соответствующих методов,
\item выводить результаты на экран.
\end{enumerate}
\end{enumerate}

\subsection*{Пример использования:}
\begin{verbatim}
ohms = 10000
converter = ResistanceConverter(ohms)
kiloohms = converter.to_kiloohms()
megaohms = converter.to_megaohms()
print(f"Сопротивление в килоомах: {kiloohms}")
print(f"Сопротивление в мегаомах: {megaohms}")
\end{verbatim}

\textbf{Вывод:}
\begin{verbatim}
Сопротивление в килоомах: 10.0
Сопротивление в мегаомах: 0.01
\end{verbatim}

\item 


\section*{Дополнительные задания}

\item
Напишите программу, которая создаёт класс \texttt{Pentagon} с методами для вычисления площади
и периметра правильного пятиугольника. Программа должна запрашивать у пользователя длину стороны
и выводить вычисленные площадь и периметр.

\subsection*{Инструкции:}
\begin{enumerate}
\item Создайте класс \texttt{Pentagon} с методом
\texttt{\_\_init\_\_}, который принимает длину стороны пятиугольника в
качестве аргумента и сохраняет её в атрибуте \texttt{self.side}.

\item Создайте метод \texttt{calculate\_area},
без аргументов, который вычисляет площадь правильного пятиугольника по формуле:
\[
\frac{1}{4} \sqrt{5(5 + 2\sqrt{5})} \cdot \texttt{side}^2
\]

\item Создайте метод \texttt{calculate\_perimeter} без аргументов,
который вычисляет периметр пятиугольника по формуле:
\[
5 \cdot \texttt{side}
\]

\item Напишите цикл, который повторяется 10 раз. В каждой итерации программа должна:
\begin{enumerate}
\item запрашивать у пользователя длину стороны пятиугольника,
\item создавать экземпляр класса \texttt{Pentagon} с этой длиной,
\item вычислять площадь и периметр с помощью соответствующих методов,
\item выводить результаты на экран.
\end{enumerate}
\end{enumerate}

\subsection*{Пример использования:}
\begin{verbatim}
side = 5
pentagon = Pentagon(side)
area = pentagon.calculate_area()
perimeter = pentagon.calculate_perimeter()
print(f"Площадь пятиугольника: {area}")
print(f"Периметр пятиугольника: {perimeter}")
\end{verbatim}

\textbf{Вывод:}
\begin{verbatim}
Площадь пятиугольника: 43.01193501472417
Периметр пятиугольника: 25
\end{verbatim}

\item
Напишите программу, которая создаёт класс \texttt{Hexagon} с методами для вычисления площади
и периметра правильного шестиугольника. Программа должна запрашивать у пользователя длину стороны
и выводить вычисленные площадь и периметр.

\subsection*{Инструкции:}
\begin{enumerate}
\item Создайте класс \texttt{Hexagon} с методом
\texttt{\_\_init\_\_}, который принимает длину стороны шестиугольника в
качестве аргумента и сохраняет её в атрибуте \texttt{self.side}.

\item Создайте метод \texttt{calculate\_area},
без аргументов, который вычисляет площадь правильного шестиугольника по формуле:
\[
\frac{3\sqrt{3}}{2} \cdot \texttt{side}^2
\]

\item Создайте метод \texttt{calculate\_perimeter} без аргументов,
который вычисляет периметр шестиугольника по формуле:
\[
6 \cdot \texttt{side}
\]

\item Напишите цикл, который повторяется 10 раз. В каждой итерации программа должна:
\begin{enumerate}
\item запрашивать у пользователя длину стороны шестиугольника,
\item создавать экземпляр класса \texttt{Hexagon} с этой длиной,
\item вычислять площадь и периметр с помощью соответствующих методов,
\item выводить результаты на экран.
\end{enumerate}
\end{enumerate}

\subsection*{Пример использования:}
\begin{verbatim}
side = 4
hexagon = Hexagon(side)
area = hexagon.calculate_area()
perimeter = hexagon.calculate_perimeter()
print(f"Площадь шестиугольника: {area}")
print(f"Периметр шестиугольника: {perimeter}")
\end{verbatim}

\textbf{Вывод:}
\begin{verbatim}
Площадь шестиугольника: 41.569219381653056
Периметр шестиугольника: 24
\end{verbatim}

\item
Напишите программу, которая создаёт класс \texttt{AngleConverter} с методами для преобразования углов
из градусов в радианы и грады. Программа должна запрашивать у пользователя угол в градусах
и выводить преобразованные значения.

\subsection*{Инструкции:}
\begin{enumerate}
\item Создайте класс \texttt{AngleConverter} с методом
\texttt{\_\_init\_\_}, который принимает угол в градусах в
качестве аргумента и сохраняет его в атрибуте \texttt{self.degrees}.

\item Создайте метод \texttt{to\_radians},
без аргументов, который преобразует угол в радианы по формуле:
\[
\texttt{degrees} \times \frac{\pi}{180}
\]

\item Создайте метод \texttt{to\_gradians} без аргументов,
который преобразует угол в грады по формуле:
\[
\texttt{degrees} \times \frac{10}{9}
\]

\item Напишите цикл, который повторяется 10 раз. В каждой итерации программа должна:
\begin{enumerate}
\item запрашивать у пользователя угол в градусах,
\item создавать экземпляр класса \texttt{AngleConverter} с этим значением,
\item вычислять угол в радианах и градах с помощью соответствующих методов,
\item выводить результаты на экран.
\end{enumerate}
\end{enumerate}

\subsection*{Пример использования:}
\begin{verbatim}
degrees = 90
converter = AngleConverter(degrees)
radians = converter.to_radians()
gradians = converter.to_gradians()
print(f"Угол в радианах: {radians}")
print(f"Угол в градах: {gradians}")
\end{verbatim}

\textbf{Вывод:}
\begin{verbatim}
Угол в радианах: 1.5707963267948966
Угол в градах: 100.0
\end{verbatim}

\item
Напишите программу, которая создаёт класс \texttt{Tetrahedron} с методами для вычисления объёма
и площади поверхности правильного тетраэдра. Программа должна запрашивать у пользователя длину ребра
и выводить вычисленные объём и площадь поверхности.

\subsection*{Инструкции:}
\begin{enumerate}
\item Создайте класс \texttt{Tetrahedron} с методом
\texttt{\_\_init\_\_}, который принимает длину ребра тетраэдра в
качестве аргумента и сохраняет её в атрибуте \texttt{self.edge}.

\item Создайте метод \texttt{calculate\_volume},
без аргументов, который вычисляет объём тетраэдра по формуле:
\[
\frac{\texttt{edge}^3}{6\sqrt{2}}
\]

\item Создайте метод \texttt{calculate\_surface\_area} без аргументов,
который вычисляет площадь поверхности тетраэдра по формуле:
\[
\sqrt{3} \cdot \texttt{edge}^2
\]

\item Напишите цикл, который повторяется 10 раз. В каждой итерации программа должна:
\begin{enumerate}
\item запрашивать у пользователя длину ребра тетраэдра,
\item создавать экземпляр класса \texttt{Tetrahedron} с этой длиной,
\item вычислять объём и площадь поверхности с помощью соответствующих методов,
\item выводить результаты на экран.
\end{enumerate}
\end{enumerate}

\subsection*{Пример использования:}
\begin{verbatim}
edge = 3
tetrahedron = Tetrahedron(edge)
volume = tetrahedron.calculate_volume()
surface_area = tetrahedron.calculate_surface_area()
print(f"Объём тетраэдра: {volume}")
print(f"Площадь поверхности: {surface_area}")
\end{verbatim}

\textbf{Вывод:}
\begin{verbatim}
Объём тетраэдра: 3.181980515339464
Площадь поверхности: 15.588457268119896
\end{verbatim}

\item
Напишите программу, которая создаёт класс \texttt{CubicMeterConverter} с методами для преобразования объёма
из кубических метров в литры и кубические футы. Программа должна запрашивать у пользователя объём в кубометрах
и выводить преобразованные значения.

\subsection*{Инструкции:}
\begin{enumerate}
\item Создайте класс \texttt{CubicMeterConverter} с методом
\texttt{\_\_init\_\_}, который принимает объём в кубических метрах в
качестве аргумента и сохраняет его в атрибуте \texttt{self.cubic\_meters}.

\item Создайте метод \texttt{to\_liters},
без аргументов, который преобразует объём в литры по формуле:
\[
\texttt{cubic\_meters} \times 1000
\]

\item Создайте метод \texttt{to\_cubic\_feet} без аргументов,
который преобразует объём в кубические футы по формуле:
\[
\texttt{cubic\_meters} \times 35.3147
\]

\item Напишите цикл, который повторяется 10 раз. В каждой итерации программа должна:
\begin{enumerate}
\item запрашивать у пользователя объём в кубических метрах,
\item создавать экземпляр класса \texttt{CubicMeterConverter} с этим значением,
\item вычислять объём в литрах и кубических футах с помощью соответствующих методов,
\item выводить результаты на экран.
\end{enumerate}
\end{enumerate}

\subsection*{Пример использования:}
\begin{verbatim}
cubic_meters = 2
converter = CubicMeterConverter(cubic_meters)
liters = converter.to_liters()
cubic_feet = converter.to_cubic_feet()
print(f"Объём в литрах: {liters}")
print(f"Объём в кубических футах: {cubic_feet}")
\end{verbatim}

\textbf{Вывод:}
\begin{verbatim}
Объём в литрах: 2000.0
Объём в кубических футах: 70.6294
\end{verbatim}

\item
Напишите программу, которая создаёт класс \texttt{RightTriangle} с методами для вычисления гипотенузы
и площади прямоугольного треугольника. Программа должна запрашивать у пользователя длину одного катета
(второй катет фиксирован и равен 4) и выводить вычисленные гипотенузу и площадь.

\subsection*{Инструкции:}
\begin{enumerate}
\item Создайте класс \texttt{RightTriangle} с методом
\texttt{\_\_init\_\_}, который принимает длину первого катета в
качестве аргумента и сохраняет его в атрибуте \texttt{self.cathetus}.
Второй катет фиксирован и равен 4.

\item Создайте метод \texttt{calculate\_hypotenuse},
без аргументов, который вычисляет гипотенузу по формуле:
\[
\sqrt{\texttt{cathetus}^2 + 4^2}
\]

\item Создайте метод \texttt{calculate\_area} без аргументов,
который вычисляет площадь треугольника по формуле:
\[
\frac{\texttt{cathetus} \times 4}{2}
\]

\item Напишите цикл, который повторяется 10 раз. В каждой итерации программа должна:
\begin{enumerate}
\item запрашивать у пользователя длину катета,
\item создавать экземпляр класса \texttt{RightTriangle} с этой длиной,
\item вычислять гипотенузу и площадь с помощью соответствующих методов,
\item выводить результаты на экран.
\end{enumerate}
\end{enumerate}

\subsection*{Пример использования:}
\begin{verbatim}
cathetus = 3
triangle = RightTriangle(cathetus)
hypotenuse = triangle.calculate_hypotenuse()
area = triangle.calculate_area()
print(f"Гипотенуза: {hypotenuse}")
print(f"Площадь: {area}")
\end{verbatim}

\textbf{Вывод:}
\begin{verbatim}
Гипотенуза: 5.0
Площадь: 6.0
\end{verbatim}

\end{enumerate}
